---
import type { HTMLTag } from "astro/types";
import type { Props as BoxProps } from "../box/box.astro";
import type { ResponsiveValue } from "../types/variants";
import { ClassList } from "../utils/classlist";
import Box from "../box/box.astro";

export type Props<Tag extends HTMLTag = "div"> = BoxProps<Tag> & {
  basis?: ResponsiveValue;
  direction?: ResponsiveValue<'row' | 'row-reverse' | 'col' | 'col-reverse'>;
  wrap?: ResponsiveValue<'wrap' | 'wrap-reverse' | 'nowrap'>;
  gap?: ResponsiveValue;
  gapY?: ResponsiveValue;
  gapX?: ResponsiveValue;
  alignItems?: ResponsiveValue<'center' | 'start' | 'end' | 'stretch' | 'baseline'>;
  alignContent?: ResponsiveValue<'center' | 'start' | 'end' | 'between' | 'around' | 'evenly'>;
  justifyContent?: ResponsiveValue<'center' | 'start' | 'end' | 'between' | 'around' | 'evenly'>;
  justifyItems?: ResponsiveValue<'center' | 'start' | 'end' | 'stretch' | 'baseline'>;
};

const {
  display = 'flex',
  class: klass,
  'class:list': list,
  basis,
  direction,
  wrap,
  gap,
  gapX,
  gapY,
  alignItems,
  alignContent,
  justifyContent,
  justifyItems,
  ...rest
}: Props = Astro.props;

const classes = ClassList.add(list, ...[
  klass || '',
  ClassList.fromResponsiveValue(null, display),
  ClassList.fromResponsiveValue('basis', basis),
  ClassList.fromResponsiveValue('flex', direction),
  ClassList.fromResponsiveValue('flex', wrap),
  ClassList.fromResponsiveValue('gap', gap),
  ClassList.fromResponsiveValue('gap-x', gapX),
  ClassList.fromResponsiveValue('gap-y', gapY),
  ClassList.fromResponsiveValue('align-items', alignItems),
  ClassList.fromResponsiveValue('align-content', alignContent),
  ClassList.fromResponsiveValue('justify-items', justifyItems),
  ClassList.fromResponsiveValue('justify-content', justifyContent),
]);
---

<Box display={display} class:list={classes} {...rest}>
  <slot />
</Box>
