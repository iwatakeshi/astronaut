---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { ResponsiveValue } from "../types/variants";
import { ClassList } from "../utils/classlist";

export type Props<Tag extends HTMLTag = "div"> = Polymorphic<{ as: Tag }> & {
  display?: ResponsiveValue;
  visibility?: ResponsiveValue<'visible' | 'hidden' | 'collapse'>;

  p?: ResponsiveValue;
  py?: ResponsiveValue;
  px?: ResponsiveValue;
  pt?: ResponsiveValue;
  pr?: ResponsiveValue;
  pb?: ResponsiveValue;
  pl?: ResponsiveValue;
  pe?: ResponsiveValue;
  ps?: ResponsiveValue;

  m?: ResponsiveValue;
  my?: ResponsiveValue;
  mx?: ResponsiveValue;
  mt?: ResponsiveValue;
  mr?: ResponsiveValue;
  mb?: ResponsiveValue;
  ml?: ResponsiveValue;
  me?: ResponsiveValue;
  ms?: ResponsiveValue;

  color?: ResponsiveValue;
  opacity?: ResponsiveValue;

  radius?: ResponsiveValue<'none'| 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full' | string>;
  
  /// Flexbox properties
  flex?: ResponsiveValue<'1' | 'auto' | 'initial' | 'none'>;
  grow?: ResponsiveValue<'1' | '0'>
  shrink?: ResponsiveValue<'1' | '0'>
  
  /// Grid properties
  rowSpan?: ResponsiveValue;
  rowStart?: ResponsiveValue;
  rowEnd?: ResponsiveValue;
  
  colSpan?: ResponsiveValue;
  colStart?: ResponsiveValue;
  colEnd?: ResponsiveValue;
  
  /// Flexbox and Grid properties
  order?: ResponsiveValue<string | number | 'first' | 'last' | 'none'>;
  gap?: ResponsiveValue;
  
  /// Position properties
  top?: ResponsiveValue;
  right?: ResponsiveValue;
  bottom?: ResponsiveValue;
  left?: ResponsiveValue;
  z?: ResponsiveValue;
  x?: ResponsiveValue<0 | '0' | 'auto'>;
  y?: ResponsiveValue<0 | '0' | 'auto'>;
  xy?: ResponsiveValue<0 | '0' | 'auto'>;

  /// Size properties
  w?: ResponsiveValue;
  h?: ResponsiveValue;
  minW?: ResponsiveValue;
  minH?: ResponsiveValue;
};

const {
  as: Tag = "div",
  class: klass,
  "class:list": list,
  display,
  p,
  py,
  px,
  pt,
  pr,
  pb,
  pl,
  pe,
  ps,
  m,
  my,
  mx,
  mt,
  mr,
  mb,
  ml,
  me,
  ms,

  color,
  opacity,
  
  radius,

  flex,
  grow,
  shrink,
  order,

  ...rest
}: Props = Astro.props;


const classes = ClassList.add(
  list,
  ...[
    klass || '',
    ClassList.fromResponsiveValue("display", display),
    ClassList.fromResponsiveValue("p", p),
    ClassList.fromResponsiveValue("py", py),
    ClassList.fromResponsiveValue("px", px),
    ClassList.fromResponsiveValue("pt", pt),
    ClassList.fromResponsiveValue("pr", pr),
    ClassList.fromResponsiveValue("pb", pb),
    ClassList.fromResponsiveValue("pl", pl),
    ClassList.fromResponsiveValue("pe", pe),
    ClassList.fromResponsiveValue("ps", ps),
    ClassList.fromResponsiveValue("m", m),
    ClassList.fromResponsiveValue("my", my),
    ClassList.fromResponsiveValue("mx", mx),
    ClassList.fromResponsiveValue("mt", mt),
    ClassList.fromResponsiveValue("mr", mr),
    ClassList.fromResponsiveValue("mb", mb),
    ClassList.fromResponsiveValue("ml", ml),
    ClassList.fromResponsiveValue("me", me),
    ClassList.fromResponsiveValue("ms", ms),
    ClassList.fromResponsiveValue("color", color),
    ClassList.fromResponsiveValue("opacity", opacity),
    ClassList.fromResponsiveValue("radius", radius),

    ClassList.fromResponsiveValue("flex", flex),
    ClassList.fromResponsiveValue("grow", grow),
    ClassList.fromResponsiveValue("shrink", shrink),
    ClassList.fromResponsiveValue("order", order),
  ].filter(Boolean),
);
---

<Tag class={classes} {...rest}>
  <slot />
</Tag>
