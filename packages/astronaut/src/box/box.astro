---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { ResponsiveValue } from "../types/variants";
import { ClassList } from "../utils/classlist";

export type Props<Tag extends HTMLTag = "div"> = Polymorphic<{ as: Tag }> & {
  display?: ResponsiveValue;
  visibility?: ResponsiveValue<'visible' | 'hidden' | 'collapse'>;

  p?: ResponsiveValue;
  py?: ResponsiveValue;
  px?: ResponsiveValue;
  pt?: ResponsiveValue;
  pr?: ResponsiveValue;
  pb?: ResponsiveValue;
  pl?: ResponsiveValue;
  pe?: ResponsiveValue;
  ps?: ResponsiveValue;

  m?: ResponsiveValue;
  my?: ResponsiveValue;
  mx?: ResponsiveValue;
  mt?: ResponsiveValue;
  mr?: ResponsiveValue;
  mb?: ResponsiveValue;
  ml?: ResponsiveValue;
  me?: ResponsiveValue;
  ms?: ResponsiveValue;

  bg?: ResponsiveValue;
  color?: ResponsiveValue;
  opacity?: ResponsiveValue;

  radius?: ResponsiveValue<'none'| 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full' | string>;
  
  /// Flexbox properties
  flex?: ResponsiveValue<'1' | 'auto' | 'initial' | 'none'>;
  grow?: ResponsiveValue<'1' | '0'>
  shrink?: ResponsiveValue<'1' | '0'>
  
  /// Grid properties
  rowSpan?: ResponsiveValue;
  rowStart?: ResponsiveValue;
  rowEnd?: ResponsiveValue;
  
  colSpan?: ResponsiveValue;
  colStart?: ResponsiveValue;
  colEnd?: ResponsiveValue;
  
  /// Flexbox and Grid properties
  order?: ResponsiveValue<string | number | 'first' | 'last' | 'none'>;
  gap?: ResponsiveValue;
  alignItems?: ResponsiveValue;
  alignContent?: ResponsiveValue;
  alignSelf?: ResponsiveValue;
  justifyContent?: ResponsiveValue;
  justifyItems?: ResponsiveValue;
  justifySelf?: ResponsiveValue;
  placeItems?: ResponsiveValue;
  placeContent?: ResponsiveValue;
  placeSelf?: ResponsiveValue;
  
  /// Position properties
  top?: ResponsiveValue;
  right?: ResponsiveValue;
  bottom?: ResponsiveValue;
  left?: ResponsiveValue;
  z?: ResponsiveValue;
  x?: ResponsiveValue<0 | '0' | 'auto'>;
  y?: ResponsiveValue<0 | '0' | 'auto'>;
  xy?: ResponsiveValue<0 | '0' | 'auto'>;

  /// Size properties
  w?: ResponsiveValue;
  h?: ResponsiveValue;
  minW?: ResponsiveValue;
  minH?: ResponsiveValue;
  maxW?: ResponsiveValue;
  maxH?: ResponsiveValue;
};

const {
  as: Tag = "div",
  class: klass,
  "class:list": list,
  /// Box properties
  display,
  visibility,
  /// Padding & Margin properties
  p,
  py,
  px,
  pt,
  pr,
  pb,
  pl,
  pe,
  ps,
  m,
  my,
  mx,
  mt,
  mr,
  mb,
  ml,
  me,
  ms,

  /// Color & Opacity properties
  bg,
  color,
  opacity,
  
  // Radius properties
  radius,

  /// Flexbox properties
  flex,
  grow,
  shrink,
  order,
  /// Grid properties
  rowSpan,
  rowStart,
  rowEnd,
  colSpan,
  colStart,
  colEnd,
  /// Flexbox and Grid properties
  gap,
  alignItems,
  alignContent,
  alignSelf,
  justifyContent,
  justifyItems,
  justifySelf,
  placeItems,
  placeContent,
  placeSelf,
  /// Position properties
  top,
  right,
  bottom,
  left,
  z,
  x,
  y,
  xy,
  /// Size properties
  w,
  h,
  minW,
  minH,
  maxW,
  maxH,
  ...rest
}: Props = Astro.props;


const classes = ClassList.add(
  list,
  ...[
    klass || '',
    /// Box properties
    ClassList.fromResponsiveValue("display", display),
    ClassList.fromResponsiveValue("visibility", visibility),
    /// Padding & Margin properties
    ClassList.fromResponsiveValue("p", p),
    ClassList.fromResponsiveValue("py", py),
    ClassList.fromResponsiveValue("px", px),
    ClassList.fromResponsiveValue("pt", pt),
    ClassList.fromResponsiveValue("pr", pr),
    ClassList.fromResponsiveValue("pb", pb),
    ClassList.fromResponsiveValue("pl", pl),
    ClassList.fromResponsiveValue("pe", pe),
    ClassList.fromResponsiveValue("ps", ps),
    ClassList.fromResponsiveValue("m", m),
    ClassList.fromResponsiveValue("my", my),
    ClassList.fromResponsiveValue("mx", mx),
    ClassList.fromResponsiveValue("mt", mt),
    ClassList.fromResponsiveValue("mr", mr),
    ClassList.fromResponsiveValue("mb", mb),
    ClassList.fromResponsiveValue("ml", ml),
    ClassList.fromResponsiveValue("me", me),
    ClassList.fromResponsiveValue("ms", ms),
    /// Color & Opacity properties
    ClassList.fromResponsiveValue("bg", bg),
    ClassList.fromResponsiveValue("color", color),
    ClassList.fromResponsiveValue("opacity", opacity),
    /// Radius properties
    ClassList.fromResponsiveValue("radius", radius),
    /// Flexbox properties
    ClassList.fromResponsiveValue("flex", flex),
    ClassList.fromResponsiveValue("grow", grow),
    ClassList.fromResponsiveValue("shrink", shrink),
    ClassList.fromResponsiveValue("order", order),
    /// Grid properties
    ClassList.fromResponsiveValue("row-span", rowSpan),
    ClassList.fromResponsiveValue("row-start", rowStart),
    ClassList.fromResponsiveValue("row-end", rowEnd),
    ClassList.fromResponsiveValue("col-span", colSpan),
    ClassList.fromResponsiveValue("col-start", colStart),
    ClassList.fromResponsiveValue("col-end", colEnd),
    ClassList.fromResponsiveValue("gap", gap),
    /// Flexbox and Grid properties
    ClassList.fromResponsiveValue("align-items", alignItems),
    ClassList.fromResponsiveValue("align-content", alignContent),
    ClassList.fromResponsiveValue("align-self", alignSelf),
    ClassList.fromResponsiveValue("justify-content", justifyContent),
    ClassList.fromResponsiveValue("justify-items", justifyItems),
    ClassList.fromResponsiveValue("justify-self", justifySelf),
    ClassList.fromResponsiveValue("place-items", placeItems),
    ClassList.fromResponsiveValue("place-content", placeContent),
    ClassList.fromResponsiveValue("place-self", placeSelf),
    /// Position properties
    ClassList.fromResponsiveValue("top", top),
    ClassList.fromResponsiveValue("right", right),
    ClassList.fromResponsiveValue("bottom", bottom),
    ClassList.fromResponsiveValue("left", left),
    ClassList.fromResponsiveValue("z", z),
    ClassList.fromResponsiveValue("x", x),
    ClassList.fromResponsiveValue("y", y),
    ClassList.fromResponsiveValue("xy", xy),
    /// Size properties
    ClassList.fromResponsiveValue("w", w),
    ClassList.fromResponsiveValue("h", h),
    ClassList.fromResponsiveValue("min-w", minW),
    ClassList.fromResponsiveValue("min-h", minH),
    ClassList.fromResponsiveValue("max-w", maxW),
    ClassList.fromResponsiveValue("max-h", maxH),
  ].filter(Boolean),
);
---

<Tag class={classes} {...rest}>
  <slot />
</Tag>
